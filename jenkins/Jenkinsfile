pipeline {
    agent any
    environment {
        DOCKER_HOST = 'tcp://docker:2376'
        DOCKER_CERT_PATH = '/certs/client'
        DOCKER_TLS_VERIFY = '1'
        CI = 'true'
    }
    stages {
        stage('Build') {
            agent {
                docker {
                    image 'node:lts-buster-slim'
                    args '-p 3000:3000'
                }
            }
            steps {
                sh 'npm install'
            }
        }
        stage('Test') {
            agent {
                docker {
                    image 'node:lts-buster-slim'
                    args '-p 3000:3000'
                }
            }
            steps {
                sh './jenkins/scripts/test.sh'
            }
        }
        stage('SonarQube Analysis') {
            environment {
                SCANNER_HOME = tool 'SonarQube Scanner' // Name given in the Jenkins tool configuration
                PATH = "${SCANNER_HOME}/bin:${env.PATH}" // Add scanner to the PATH
            }
            steps {
                withSonarQubeEnv('sonar') {
                    sh '''
                        sonar-scanner \
                        -Dsonar.projectKey=my-app \
                        -Dsonar.sources=.
                    '''
                }
            }
        }
        stage('Build and Push Docker Image') {
            steps {
                withDockerRegistry(url: "http://local-registry:5000", credentialsId: '') {
                script {
                    def app = docker.build("local-registry:5000/my-app:latest")
                    app.push('latest')
                    }
                }
            }
        }
    }
}
